*,
*:before,
*:after {
  box-sizing: inherit;
  user-select: none;
  outline: none;
  -webkit-touch-callout: none;
}

* {
  margin: 0;
  padding: 0;
}

html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

body {
  line-height: 1;
}

ol,
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

:focus {
  outline: none;
}

::-moz-focus-inner {
  border: 0;
}

a {
  color: inherit;
  outline: none;
  pointer-events: auto;
  text-decoration: none;
}

button {
  background: none;
  border: none;
  border-radius: none;
  color: inherit;
  font: inherit;
  outline: none;
  pointer-events: auto;
}

img {
  vertical-align: middle;
}

input,
textarea {
  appearance: none;
  background: none;
  border: none;
  border-radius: 0;
  outline: none;
  pointer-events: auto;
}

ol,
ul {
  list-style: none;
}

.navigation, .preloader {
  height: 100%;
  left: 0;
  object-fit: cover;
  position: absolute;
  top: 0;
  width: 100%;
}

.home__intro, .preloader {
  align-items: center;
  display: flex;
  justify-content: center;
}

.dg.ac {
  z-index: 99999 !important;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}
body {
  font-size: 1.5rem;
}

.preloader__title {
  font-size: 1.7rem;
}
@media (max-width: 767px) {
  .preloader__title {
    font-size: 1.4rem;
  }
}

.footer__link {
  font-family: "Bigilla";
  font-size: 15rem;
}

.home__works__list__link, .home__categories__title, .preloader__name {
  font-family: "Bigilla";
  font-weight: bold;
  font-size: 20rem;
}
@media (max-width: 767px) {
  .home__works__list__link, .home__categories__title, .preloader__name {
    font-size: 7rem;
  }
}

.home__works__title, .home__myself__title {
  font-family: "Bigilla";
  font-size: 30rem;
}

.home__title {
  font-family: "Bigilla";
  font-weight: bold;
  font-size: 37rem;
}

html {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 10px;
}
@media (max-width: 1728px) {
  html {
    font-size: 9px;
  }
}
@media (max-width: 1536px) {
  html {
    font-size: 8px;
  }
}
@media (max-width: 1344px) {
  html {
    font-size: 7px;
  }
}
@media (max-width: 1152px) {
  html {
    font-size: 6px;
  }
}
@media (max-width: 767px) {
  html {
    font-size: 10px;
  }
}

body {
  /* Add background-color, color and font-family */
  background-color: #1a1a1a;
  color: #f6f5f1;
  font-family: "Supreme";
  text-transform: uppercase;
}

[data-animation=paragraph] span {
  display: inline-block;
  overflow: hidden;
  vertical-align: top;
}

.preloader {
  background: #f6f5f1;
  color: #1a1a1a;
  flex-direction: column;
  height: 100vh;
  overflow: hidden;
  position: fixed;
  transform-origin: 0 0;
  z-index: 5;
  display: none;
}
.preloader--loaded {
  transform: scaleY(0);
}

.preloader__name {
  text-align: center;
  max-width: 117.2rem;
  margin-top: -10vh;
}
@media (max-width: 767px) {
  .preloader__name {
    width: 22.2rem;
    margin-top: 0;
  }
}

.preloader__box {
  align-items: center;
  bottom: 6.4rem;
  display: flex;
  justify-content: space-around;
  left: 50%;
  position: absolute;
  transform: translateX(-50%);
  width: 100%;
}

.stars {
  animation: spin 4s linear infinite;
  fill: #1a1a1a;
  height: 1.8rem;
  width: 1.8rem;
}
@media (max-width: 1024px) {
  .stars {
    height: 1.25rem;
    width: 1.25rem;
  }
}
@media (max-width: 767px) {
  .stars {
    height: 1.05rem;
    width: 1.05rem;
  }
}

.navigation {
  pointer-events: none;
  position: fixed;
  z-index: 4;
}

.navigation__link {
  pointer-events: auto;
  position: absolute;
  top: 4rem;
}
.navigation__link:first-child {
  left: 4rem;
}
.navigation__link:last-child {
  right: 4rem;
}

.footer {
  margin-top: 30rem;
}
@media (max-width: 1023px) {
  .footer {
    margin-top: 18.8888rem;
  }
}
@media (max-width: 767px) {
  .footer {
    margin-top: 10.7142rem;
  }
}

.footer__label {
  margin: 50.2rem 0;
  text-align: center;
}

.footer__box {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
}

.footer__link {
  font-weight: bold;
  line-height: 1.2;
  width: fit-content;
}
.footer__link:nth-child(even) {
  justify-self: end;
}

.footer__name {
  margin-top: 3rem;
  fill: #f6f5f1;
}

.home__intro {
  height: 100vh;
}

.home__title {
  max-width: 181.7rem;
}

.home__label {
  bottom: 4rem;
  position: absolute;
  right: 4rem;
}

.home__link {
  bottom: 4rem;
  cursor: pointer;
  left: 4rem;
  position: absolute;
  text-transform: uppercase;
}

.home__myself__label {
  margin: 50.2rem 0;
  text-align: center;
}

.home__myself__title {
  margin-bottom: 26.6rem;
}

.home__myself__description {
  margin: auto;
  max-width: 51.1rem;
  line-height: 1.6;
  letter-spacing: 0.0375rem;
}
.home__myself__description:last-child {
  margin-top: 2.4rem;
}

.home__categories__list {
  margin: 50.2rem 0;
}

.home__categories__list__item {
  padding: 7.6rem 0;
  position: relative;
}
.home__categories__list__item:nth-child(1) h2 {
  transform: translateX(33.4rem);
}
.home__categories__list__item:nth-child(2) h2 {
  transform: translateX(83.9rem);
}
.home__categories__list__item:nth-child(3) h2 {
  transform: translateX(26.7rem);
}

.home__categories__stroke {
  border-top: 1px solid rgba(246, 245, 241, 0.2);
  display: inline-block;
  left: 0;
  position: absolute;
  top: 0;
  transform-origin: left;
  width: 100%;
}

.home__categories__title {
  font-weight: 400;
  width: fit-content;
}

.home__works__label {
  margin-bottom: 50.2rem;
  text-align: center;
}

.home__works__title {
  margin-bottom: 26.6rem;
}

.home__works__list__link span {
  display: inline-block;
}

.home__works__list__item:nth-child(1) span {
  transform: translateX(34vw);
}

.home__works__list__item:nth-child(2) span {
  transform: translateX(20vw);
}

.home__works__list__item:nth-child(3) span {
  transform: translateX(40vw);
}

.home__works__list__item:nth-child(4) span {
  transform: translateX(13vw);
}

.home__works__list__item:nth-child(5) span {
  transform: translateX(38vw);
}

.home__works__list__item:nth-child(6) span {
  transform: translateX(20vw);
}

.home__works__list__item:nth-child(7) span {
  transform: translateX(43vw);
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/